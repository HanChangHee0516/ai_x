1절. 객체와 클래스
	class 클래스명 (상속받을 클래스명):
	변수나 람수들 선언

2절. 생성자와 소멸자
	생성자 : __init__(self, 매개변수,...) - 객체가 생성될 때 자동 생성
            객체 생성시 필요한 이스턴스 변수 초기화를 포함
	소멸자 : __del__(self) - 객체가 소멸될 때 자동 실행
            인스턴스 객체의 레퍼런스 카운트사 0아 될 대 실행

3절. 변수와 메소드
	인스턴스 변수 vs 클래스 변수
	인스턴스 메소드 (self) vs 클래스 메소드(clz) vs static 메소드()

※ 인스턴스 메소드 (self) vs 클래스 메소드(clz) vs static 메소드()

인스턴스 메소드 : 첫번째 인자에 self를 꼭 명시. 객체를 통해서만 호출할 수 있는 메소드
클래스 메소드 : 메소드위에 @classmethod를 선언한 메소드. 첫번째 인자에 cls(clz) 꼭 명시
static 메소드 : 메소드 위에 @staticmethod 선언한 메소드. 인자를 넣지 않음


객체를 이용하면 객체에 정보를 저장하고, 그 정보를 이용해서 어떤 기능릏 수행할 수 있다 객체 = 데이터(변수:객체마다 고유의 값) + 기능(메소드, 함수)
그 객체를 만들기 위한 틀 => 클래스

    class 클래스명:
        '독스트링'
        클래스변수명 = 값
       def __init__(self, [객체멤버를 초기화할 변수=값,...]):
           self.인스턴스(일반)변수 = 값
           객체를 생성할 때 객체 멤버변수의 초기화
       def method(self):
           인스턴스 메소드(일반함수)의 매개변수는 self를 반드시 포함
       @calssmethod
       def calssmethon(cls):
           코드
       @staticmethood
       def staticmethod():
           코드
    객체변수 = 클래스명()
    객체변수.method()
    클래스명.calssmethod()
    클래스명.staticmethod()

4절. 상속과 재정의
	클래스를 재사용
	상속을 이용하면 부모클래스의 모든 속성을 자식클래스로 물려줄 수 있음
	문법 : class 자식클래스명(부모클래스명):

정적변수(static 변수) : 여러 객체들 사이에 데이터를 공유하고 싶을 때 사용¶
satic 변수 앞에 under score 2개 (__)를 붙이면 클래스명._클래스명__static변수명으로 참조
클래스 변수는 외부에서 바로 접근 가능.
static 변수는 외부에서 바로 접근하는 것을 방지
static 변수는 클래스 내부애서만 접근하도록 하려는 의도.